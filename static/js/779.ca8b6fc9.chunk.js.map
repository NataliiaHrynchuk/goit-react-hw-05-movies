{"version":3,"file":"static/js/779.ca8b6fc9.chunk.js","mappings":"sNAEaA,E,QAAcC,GAAAA,GAAH,sI,4BCoCxB,EAjCgB,WACZ,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GACgBN,GACXO,MAAK,SAAAC,GAAO,OACTJ,EAAWI,EAAQC,KAAI,kBAA4B,CAC3CC,GADe,EAAEA,GAEjBC,OAFe,EAAMA,OAGrBC,QAHe,EAAcA,QAAd,IADd,GAMpB,GAAE,CAACZ,KAGA,yBACKG,EAAQU,OAAS,GACd,SAAC,EAAD,UACCV,EAAQM,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAAd,OACT,2BACI,wBAAKD,KACL,uBAAIC,MAFCF,EADA,OAQb,qEAIf,C,4MClCDI,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAGZ,IAAMC,EAAgB,mCAAG,oGACLH,IAAAA,IAAA,sBADK,cACtBI,EADsB,yBAErBA,EAASC,KAAKX,SAFO,2CAAH,qDAKhBY,EAAe,mCAAG,WAAMC,GAAN,uFACAP,IAAAA,IAAA,8BAAiCO,IADjC,cACjBH,EADiB,yBAEhBA,EAASC,KAAKX,SAFE,2CAAH,sDAKfc,EAAY,mCAAG,WAAMtB,GAAN,uFACDc,IAAAA,IAAA,iBAAoBd,EAApB,MADC,cAClBkB,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZI,EAAU,SAAAvB,GACnB,IACI,OAAOc,IAAAA,IAAA,iBACQd,EADR,cAENO,MAAK,qBAAEY,KAAOK,IAAT,GAGL,CAFH,MAAOC,GACDC,QAAQC,IAAI,QAAS,CAACF,MAAAA,GACzB,CACR,EAIYG,EAAa,SAAA5B,GACtB,IACI,OAAOc,IAAAA,IAAA,iBACQd,EADR,cAENO,MAAM,qBAAEY,KAAOX,OAAT,GAGV,CAFC,MAAOiB,GACLC,QAAQC,IAAI,QAAS,CAACF,MAAAA,GACzB,CACJ,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsList = styled.ul`\n    list-style: none;\n    padding-left: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n`;","import * as API from '../../services/api';\nimport * as SC from './Reviews.styled';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        API\n            .getReviews(movieId)\n            .then(results => \n                setReviews(results.map(({id, author, content}) => ({\n                        id,\n                        author, \n                        content,\n                    })))); \n    }, [movieId]);\n\n    return (\n        <div>\n            {reviews.length > 0 ? (\n                <SC.ReviewsList>\n                {reviews.map(({id, author, content}) => (\n                    <li key={id}>\n                        <h3>{author}</h3>\n                        <p>{content}</p>\n                    </li>\n                ))}\n                </SC.ReviewsList>\n            ) : (\n                <p>We don`t have any reviews for this movie</p>\n            )}\n        </div>\n    )\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nexport const getTradingMovies = async() => {\n    const response = await axios.get(`/trending/all/day?`);\n    return response.data.results;\n};\n\nexport const getMoviesByName = async query => {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}?`);\n    return response.data;\n};\n\nexport const getCast = movieId => {\n    try {\n        return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) => cast)\n    } catch (error) {\n            console.log('error', {error});\n        }\n};\n\n\n\nexport const getReviews = movieId => {\n    try {\n        return axios\n        .get(`/movie/${movieId}/reviews?`)\n        .then (({data: {results}}) => results)\n    } catch (error) {\n        console.log('error', {error});\n    };\n};\n\n\n\n\n"],"names":["ReviewsList","styled","movieId","useParams","useState","reviews","setReviews","useEffect","API","then","results","map","id","author","content","length","axios","api_key","include_adult","getTradingMovies","response","data","getMoviesByName","query","getMovieById","getCast","cast","error","console","log","getReviews"],"sourceRoot":""}