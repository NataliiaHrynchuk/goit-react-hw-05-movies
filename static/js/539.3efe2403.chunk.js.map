{"version":3,"file":"static/js/539.3efe2403.chunk.js","mappings":"4MA4CA,UArCa,WACT,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GACaN,GACRO,MAAK,SAAAJ,GAAI,OACNC,EAAQD,EAAKK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAkD,CAC/DJ,GAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAC,MAAOA,EAdX,kCAc6BA,EAAQE,EAJpB,IADX,GASjB,GAAE,CAACd,KAGA,yBACKG,EAAKY,OAAS,IACX,wBACCZ,EAAKK,KAAI,YAAoC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC7B,OACI,2BACA,gBAAKI,IAAKJ,EAAOK,IAAI,WACrB,uBAAIP,IACHC,IAAa,uCAAeA,OAHpBF,EAMhB,OAKhB,C,4MCzCKS,EAAU,mCACVC,EAAW,+BACXC,EAAU,kCAUT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEwBC,IAAAA,IAAA,UAAaH,EAAb,qCAAkDD,IAF1E,cAEOK,EAFP,yBAGQA,EAASC,MAHjB,gCAKH,IAAIC,MAAM,qBALP,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gFACGC,EAAe,IAAIC,gBAAgB,CACrCC,QAASZ,EACTa,SAAU,QACVC,KAAM,EACNC,eAAe,EACfN,MAAAA,IAND,kBASwBL,IAAAA,IAAA,UAAaH,EAAb,yBAAsCS,IAT9D,cASOL,EATP,yBAUQA,EAASC,MAVjB,gCAYC,IAAIC,MAAJ,sCAAyCE,IAZ1C,gFAgBA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA4BlC,GAA5B,0FACIsB,IAAAA,IAAA,iBACQtB,EADR,MAENO,MACG,oBACIiB,KACIf,EAFR,EAEQA,GACa0B,EAHrB,EAGQC,YACAC,EAJR,EAIQA,MACA3B,EALR,EAKQA,KACc4B,EANtB,EAMQC,aACcC,EAPtB,EAOQC,aACAC,EARR,EAQQA,SACAC,EATR,EASQA,OATR,MAWO,CACHlC,GAAAA,EACA0B,OAAQf,EAAUe,EAClBE,MAAAA,EACA3B,KAAAA,EACA4B,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAnBJ,IAsBHK,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,KA5BE,kEAjCP9B,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBQ,QAAS,mCACTG,eAAe,GA6DZ,IAAMoB,EAAU,SAAArD,GACnB,OAAOsB,IAAAA,IAAA,iBACYtB,EADZ,cAEFO,MAAK,qBAAEiB,KAAOrB,IAAT,IAGL6C,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACR,EAEYE,EAAa,SAAAtD,GACtB,OAAOsB,IAAAA,IAAA,iBACQtB,EADR,cAENO,MAAM,qBAAEiB,KAAO+B,OAAT,IAGNP,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,C","sources":["components/MoreDetails/Cast.jsx","services/api.js"],"sourcesContent":["import * as API from '../../services/api';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport defaultPhoto from 'components/images/free-sticker-think-7598091.png'\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => { \n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        API\n            .getCast(movieId)\n            .then(cast => \n                setCast(cast.map(({ id, name, character, profile_path: photo}) => ({\n                    id,\n                    name, \n                    character,\n                    photo: photo ? IMG_URL + photo : defaultPhoto,\n                }))\n            ))\n                \n    }, [movieId]);\n\n    return (\n        <div>\n            {cast.length > 0 && (\n                <ul>\n                {cast.map(({id, name, character, photo }) => {\n                    return (\n                        <li key={id}>\n                        <img src={photo} alt=\"actor\"></img>\n                        <p>{name}</p>\n                        {character && <p>Character: {character }</p>}\n                    </li>\n                    )\n                })}\n            </ul>\n            )}\n        </div>\n    )\n};\n\nexport default Cast;","import axios from 'axios';\nconst API_KEY = '6860d409037e6854532ae07af7af1d83';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '2123fea73978ac77fe6a3f347cf7ced6',\n    include_adult: false,\n};\n\n\n\nexport async function getTradingMovies() {\n    try {\n        const response = await axios.get(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`);\n        return response.data;\n    } catch(error) {\n    new Error('There is no movie');\n}\n};\n\nexport async function getMoviesByName(query) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n        query,\n    });\n    try {\n        const response = await axios.get(`${BASE_URL}/search/movie?${searchParams}`);\n        return response.data;\n    } catch (error) {\n        new Error(`There is no movie with name ${query}`);\n    }\n};\n\nexport async function getMovieById(movieId) {\n    return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n        ({\n            data:{\n                id, \n                poster_path: poster,\n                title,\n                name,\n                release_date: releaseYear,\n                vote_average: userScore,\n                overview,\n                genres,\n            },\n        }) => ({\n            id,\n            poster: IMG_URL + poster,\n            title,\n            name,\n            releaseYear: new Date(releaseYear).getFullYear(),\n            userScore: Math.round(userScore * 10),\n            overview,\n            genres,\n        })\n    )\n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getCast = movieId => {\n    return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) =>\n        cast\n        )\n        .catch (error => {\n            console.log(error.message);\n        })\n};\n\nexport const getReviews = movieId => {\n    return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then (({data: {results}}) => \n    results\n    )   \n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\n\n\n\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","API","then","map","id","name","character","photo","profile_path","defaultPhoto","length","src","alt","API_KEY","BASE_URL","IMG_URL","getTradingMovies","axios","response","data","Error","getMoviesByName","query","searchParams","URLSearchParams","api_key","language","page","include_adult","getMovieById","poster","poster_path","title","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","catch","error","console","log","message","getCast","getReviews","results"],"sourceRoot":""}