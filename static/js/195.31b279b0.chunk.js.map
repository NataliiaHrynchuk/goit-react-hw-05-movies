{"version":3,"file":"static/js/195.31b279b0.chunk.js","mappings":"iMAqCA,UAjCgB,WACZ,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GACgBN,GACXO,MAAK,SAAAC,GAAO,OACTJ,EAAWI,EAAQC,KAAI,kBAA4B,CAC3CC,GADe,EAAEA,GAEjBC,OAFe,EAAMA,OAGrBC,QAHe,EAAcA,QAAd,IADd,GAMpB,GAAE,CAACZ,KAGA,yBACKG,EAAQU,OAAS,GACd,wBACCV,EAAQM,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAAd,OACT,2BACI,wBAAKD,KACL,uBAAIC,MAFCF,EADA,OAQb,qEAIf,C,+KCjCDI,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAGnB,IAEaC,EAAmB,WAC5B,OAAOH,IAAAA,IAAA,sBACNP,MAAK,qBAAEW,KAAOV,OAAT,IAEJW,OAAO,SAAAC,GACNC,QAAQC,IAAIF,EAAMG,QACpB,GACJ,EAEYC,EAAkB,SAAAC,GAC3B,OAAOX,IAAAA,IAAA,8BACqBW,IAC3BlB,MAAK,qBAAEW,KAAOV,OAAT,IAEJW,OAAO,SAAAC,GACNC,QAAQC,IAAIF,EAAMG,QACpB,GACJ,EAEYG,EAAe,SAAA1B,GACxB,OAAOc,IAAAA,IAAA,iBACQd,EADR,MAENO,MACG,oBACIW,KACIR,EAFR,EAEQA,GACaiB,EAHrB,EAGQC,YACAC,EAJR,EAIQA,MACAC,EALR,EAKQA,KACcC,EANtB,EAMQC,aACcC,EAPtB,EAOQC,aACAC,EARR,EAQQA,SACAC,EATR,EASQA,OATR,MAWO,CACH1B,GAAAA,EACAiB,OAtCI,kCAsCcA,EAClBE,MAAAA,EACAC,KAAAA,EACAC,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAnBJ,IAsBHjB,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,EAEYkB,EAAU,SAAAzC,GACnB,OAAOc,IAAAA,IAAA,iBACYd,EADZ,cAEFO,MAAK,qBAAEW,KAAOwB,IAAT,IAGLvB,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACR,EAEYoB,EAAa,SAAA3C,GACtB,OAAOc,IAAAA,IAAA,iBACQd,EADR,cAENO,MAAM,qBAAEW,KAAOV,OAAT,IAGNW,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,C","sources":["components/MoreDetails/Reviews.jsx","services/api.js"],"sourcesContent":["import * as API from '../../services/api';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        API\n            .getReviews(movieId)\n            .then(results => \n                setReviews(results.map(({id, author, content}) => ({\n                        id,\n                        author, \n                        content,\n                    })))); \n    }, [movieId]);\n\n    return (\n        <div>\n            {reviews.length > 0 ? (\n                <ul>\n                {reviews.map(({id, author, content}) => (\n                    <li key={id}>\n                        <h3>{author}</h3>\n                        <p>{content}</p>\n                    </li>\n                ))}\n                </ul>\n            ) : (\n                <p>We don`t have any reviews for this movie</p>\n            )}\n        </div>\n    )\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const getTradingMovies = () => {\n    return axios.get(`/trending/all/day?`)\n    .then(({data: {results}}) => \n    results)\n    . catch (error => {\n       console.log(error.message);\n    });\n};\n\nexport const getMoviesByName = query => {\n    return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({data: {results}}) => \n    results)\n    . catch (error => {\n       console.log(error.message);\n    });\n};\n\nexport const getMovieById = movieId => {\n    return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n        ({\n            data:{\n                id, \n                poster_path: poster,\n                title,\n                name,\n                release_date: releaseYear,\n                vote_average: userScore,\n                overview,\n                genres,\n            },\n        }) => ({\n            id,\n            poster: IMG_URL + poster,\n            title,\n            name,\n            releaseYear: new Date(releaseYear).getFullYear(),\n            userScore: Math.round(userScore * 10),\n            overview,\n            genres,\n        })\n    )\n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getCast = movieId => {\n    return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) =>\n        cast\n        )\n        .catch (error => {\n            console.log(error.message);\n        })\n};\n\nexport const getReviews = movieId => {\n    return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then (({data: {results}}) => \n    results\n    )   \n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\n\n\n\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","API","then","results","map","id","author","content","length","axios","api_key","include_adult","getTradingMovies","data","catch","error","console","log","message","getMoviesByName","query","getMovieById","poster","poster_path","title","name","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","getCast","cast","getReviews"],"sourceRoot":""}