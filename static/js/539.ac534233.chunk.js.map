{"version":3,"file":"static/js/539.ac534233.chunk.js","mappings":"2MA4CA,UArCa,WACT,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GACaN,GACRO,MAAK,SAAAJ,GAAI,OACNC,EAAQD,EAAKK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAkD,CAC/DJ,GAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAC,MAAOA,EAdX,kCAc6BA,EAAQE,EAJpB,IADX,GASjB,GAAE,CAACd,KAGA,yBACKG,EAAKY,OAAS,IACX,wBACCZ,EAAKK,KAAI,YAAoC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC7B,OACI,2BACA,gBAAKI,IAAKJ,EAAOK,IAAI,WACrB,uBAAIP,IACHC,IAAa,uCAAeA,OAHpBF,EAMhB,OAKhB,C,+KCxCDS,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAGnB,IAEaC,EAAmB,WAC5B,OAAOH,IAAAA,IAAA,sBACNX,MAAK,qBAAEe,KAAOC,OAAT,IAEJC,OAAO,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,EAEYC,EAAkB,SAAAC,GAC3B,OAAOZ,IAAAA,IAAA,8BACqBY,IAC3BvB,MAAK,qBAAEe,KAAOC,OAAT,IAEJC,OAAO,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,EAEYG,EAAe,SAAA/B,GACxB,OAAOkB,IAAAA,IAAA,iBACQlB,EADR,MAENO,MACG,oBACIe,KACIb,EAFR,EAEQA,GACauB,EAHrB,EAGQC,YACAC,EAJR,EAIQA,MACAxB,EALR,EAKQA,KACcyB,EANtB,EAMQC,aACcC,EAPtB,EAOQC,aACAC,EARR,EAQQA,SACAC,EATR,EASQA,OATR,MAWO,CACH/B,GAAAA,EACAuB,OAtCI,kCAsCcA,EAClBE,MAAAA,EACAxB,KAAAA,EACAyB,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAnBJ,IAsBHhB,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,EAEYiB,EAAU,SAAA7C,GACnB,OAAOkB,IAAAA,IAAA,iBACYlB,EADZ,cAEFO,MAAK,qBAAEe,KAAOnB,IAAT,IAGLqB,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACR,EAEYkB,EAAa,SAAA9C,GACtB,OAAOkB,IAAAA,IAAA,iBACQlB,EADR,cAENO,MAAM,qBAAEe,KAAOC,OAAT,IAGNC,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,C","sources":["components/MoreDetails/Cast.jsx","services/api.js"],"sourcesContent":["import * as API from '../../services/api';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport defaultPhoto from 'components/images/free-sticker-think-7598091.png'\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => { \n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        API\n            .getCast(movieId)\n            .then(cast => \n                setCast(cast.map(({ id, name, character, profile_path: photo}) => ({\n                    id,\n                    name, \n                    character,\n                    photo: photo ? IMG_URL + photo : defaultPhoto,\n                }))\n            ))\n                \n    }, [movieId]);\n\n    return (\n        <div>\n            {cast.length > 0 && (\n                <ul>\n                {cast.map(({id, name, character, photo }) => {\n                    return (\n                        <li key={id}>\n                        <img src={photo} alt=\"actor\"></img>\n                        <p>{name}</p>\n                        {character && <p>Character: {character }</p>}\n                    </li>\n                    )\n                })}\n            </ul>\n            )}\n        </div>\n    )\n};\n\nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const getTradingMovies = () => {\n    return axios.get(`/trending/all/day?`)\n    .then(({data: {results}}) => \n    results)\n    . catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getMoviesByName = query => {\n    return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({data: {results}}) => \n    results)\n    . catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getMovieById = movieId => {\n    return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n        ({\n            data:{\n                id, \n                poster_path: poster,\n                title,\n                name,\n                release_date: releaseYear,\n                vote_average: userScore,\n                overview,\n                genres,\n            },\n        }) => ({\n            id,\n            poster: IMG_URL + poster,\n            title,\n            name,\n            releaseYear: new Date(releaseYear).getFullYear(),\n            userScore: Math.round(userScore * 10),\n            overview,\n            genres,\n        })\n    )\n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getCast = movieId => {\n    return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) =>\n        cast\n        )\n        .catch (error => {\n            console.log(error.message);\n        })\n};\n\nexport const getReviews = movieId => {\n    return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then (({data: {results}}) => \n    results\n    )   \n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\n\n\n\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","API","then","map","id","name","character","photo","profile_path","defaultPhoto","length","src","alt","axios","api_key","include_adult","getTradingMovies","data","results","catch","error","console","log","message","getMoviesByName","query","getMovieById","poster","poster_path","title","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","getCast","getReviews"],"sourceRoot":""}