{"version":3,"file":"static/js/387.3d45183a.chunk.js","mappings":"wOAEaA,EAAWC,EAAAA,GAAAA,GAAH,mTAeRC,EAAWD,EAAAA,GAAAA,GAAH,weAmBRE,EAAOF,EAAAA,GAAAA,IAAH,0IASJG,EAAOH,EAAAA,GAAAA,EAAH,8CAIJI,EAAYJ,EAAAA,GAAAA,EAAH,8C,sCCCtB,EA1Ca,WACT,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GACaN,GACRO,MAAK,SAAAJ,GAAI,OACNC,EAAQD,EAAKK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAkD,CAC/DJ,GAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAC,MAAOA,EAdX,kCAc6BA,EAAQE,EAJpB,IADX,GASjB,GAAE,CAACd,KAGA,yBACKG,EAAKY,OAAS,IACX,SAAC,EAAD,UACCZ,EAAKK,KAAI,YAAoC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC7B,OACI,UAAC,EAAD,YACI,gBAAKI,IAAKJ,EAAOK,IAAI,WACrB,UAAC,EAAD,YACI,SAAC,EAAD,UAAUP,IACbC,IACG,UAAC,EAAD,yBAA0BA,UALhBF,EAWzB,OAKhB,C,4MC9CDS,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAGZ,IAAMC,EAAgB,mCAAG,oGACLH,IAAAA,IAAA,sBADK,cACtBI,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAKhBC,EAAe,mCAAG,WAAMC,GAAN,uFACAR,IAAAA,IAAA,8BAAiCQ,IADjC,cACjBJ,EADiB,yBAEhBA,EAASC,KAAKC,SAFE,2CAAH,sDAKfG,EAAY,mCAAG,WAAM3B,GAAN,uFACDkB,IAAAA,IAAA,iBAAoBlB,EAApB,MADC,cAClBsB,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZK,EAAU,SAAA5B,GACnB,IACI,OAAOkB,IAAAA,IAAA,iBACQlB,EADR,cAENO,MAAK,qBAAEgB,KAAOpB,IAAT,GAGL,CAFH,MAAO0B,GACDC,QAAQC,IAAI,QAAS,CAACF,MAAAA,GACzB,CACR,EAIYG,EAAa,SAAAhC,GACtB,IACI,OAAOkB,IAAAA,IAAA,iBACQlB,EADR,cAENO,MAAM,qBAAEgB,KAAOC,OAAT,GAGV,CAFC,MAAOK,GACLC,QAAQC,IAAI,QAAS,CAACF,MAAAA,GACzB,CACJ,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n    list-style: none;\n    padding-left: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    \n    @media screen and (min-width: 768px){\n        flex-direction: row;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        gap: 24px;\n    }\n`;\n\nexport const CastItem = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    width: 100%;\n    justify-content: space-between;\n    background: rgb(255, 255, 255);\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n    border-radius: 5px;\n    @media screen and (min-width: 768px){\n        max-width: 200px;\n    }\n\n    @media screen and (min-width: 768px){\n        max-width: 300px;\n    }\n`;\n\nexport const Wrap = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 12px 4px;\n    text-align: center;\n`;\n\n\nexport const Name = styled.p`\n    font-size: 20px;\n`;\n\nexport const Character = styled.p`\n    font-size: 16px;\n`;\n\n","import * as API from '../../services/api';\nimport * as SC from './Cast.styled';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport defaultPhoto from 'components/images/free-sticker-think-7598091.png'\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => { \n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        API\n            .getCast(movieId)\n            .then(cast => \n                setCast(cast.map(({ id, name, character, profile_path: photo}) => ({\n                    id,\n                    name, \n                    character,\n                    photo: photo ? IMG_URL + photo : defaultPhoto,\n                }))\n            ))\n                \n    }, [movieId]);\n\n    return (\n        <div>\n            {cast.length > 0 && (\n                <SC.CastList>\n                {cast.map(({id, name, character, photo }) => {\n                    return (\n                        <SC.CastItem key={id}>\n                            <img src={photo} alt=\"actor\" />\n                            <SC.Wrap>\n                                <SC.Name>{name}</SC.Name>\n                            {character &&\n                                <SC.Character>Character: {character}</SC.Character>\n                            }\n                            </SC.Wrap>\n                        \n                    </SC.CastItem>\n                    )\n                })}\n            </SC.CastList>\n            )}\n        </div>\n    )\n};\n\nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nexport const getTradingMovies = async() => {\n    const response = await axios.get(`/trending/all/day?`);\n    return response.data.results;\n};\n\nexport const getMoviesByName = async query => {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}?`);\n    return response.data;\n};\n\nexport const getCast = movieId => {\n    try {\n        return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) => cast)\n    } catch (error) {\n            console.log('error', {error});\n        }\n};\n\n\n\nexport const getReviews = movieId => {\n    try {\n        return axios\n        .get(`/movie/${movieId}/reviews?`)\n        .then (({data: {results}}) => results)\n    } catch (error) {\n        console.log('error', {error});\n    };\n};\n\n\n\n\n"],"names":["CastList","styled","CastItem","Wrap","Name","Character","movieId","useParams","useState","cast","setCast","useEffect","API","then","map","id","name","character","photo","profile_path","defaultPhoto","length","src","alt","axios","api_key","include_adult","getTradingMovies","response","data","results","getMoviesByName","query","getMovieById","getCast","error","console","log","getReviews"],"sourceRoot":""}