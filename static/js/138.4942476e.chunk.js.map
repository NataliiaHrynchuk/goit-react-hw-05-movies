{"version":3,"file":"static/js/138.4942476e.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/NoResults/NoResults.styled.js","components/NoResults/NoResults.jsx","components/SearchForm/SearchForm.style.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Box = styled.ul`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\ngap: 12px;\npadding: 0;\njustify-content: center;\n    @media screen and (min-width: 768px){\n        max-width: 768px;\n        flex-direction: row;\n        flex-wrap: wrap;\n        gap: 60px;\n    }\n    @media screen and (min-width: 1200px) {\n        max-width: 1020px;\n    }\n`;\n\nexport const MovieItem = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    width: 100%;\n    margin-bottom: 12px;\n    background: rgb(255, 255, 255);\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n    border-radius: 5px;\n    text-decoration: none;\n    text-align: center;\n    transition-duration: 300ms;\n    &:hover {\n        cursor: pointer;\n        transform: scale(1.03);\n        box-shadow: rgb(0 0 0 / 8%) 0px 10px 25px;\n    }\n    @media screen and (min-width: 768px) {\n        margin-bottom: 0;\n        width: 300px;\n    }\n`;\n\nexport const StyledLink = styled(NavLink)`\n    border-radius: 4px;\n    text-decoration: none;\n    color: #C71585;\n    font-weight: 500;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    @media screen and (min-width: 768px){\n        min-height: 495.52px;\n    }\n`;\n\nexport const Poster = styled.img`\n    padding: 0px;\n    margin: 0px; \n    width: 100%;\n    display: block;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n`;\n\nexport const MiddleTitle = styled.h3`\n    padding: 12px 4px;\n    @media screen and (min-width: 1200px) {\n        font-size: 24px;\n    }\n`;","import { useLocation } from 'react-router-dom';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as SC from './MovieList.styled';\nimport noResults from 'components/images/clipart2883707.png';\n\nexport const MovieList = ({ movies }) => {\n    const [baseUrl] = useState('https://image.tmdb.org/t/p/w500');\n    const location = useLocation();\n    \n    return (\n        <SC.Box>\n            {movies.map(({ id, title, name, poster_path}) =>\n                <SC.MovieItem key = {id}>\n            <SC.StyledLink to={`/movies/${id}`} state={{from:location}}>\n                <SC.Poster \n                src={\n                    poster_path ? baseUrl + poster_path : noResults\n                    } \n                    alt={title || name}/>\n                <SC.MiddleTitle>{title || name}</SC.MiddleTitle>\n            </SC.StyledLink>\n        </SC.MovieItem>)\n}\n                \n        </SC.Box>\n    )\n};\n\nMovieList.propTypes = {\n    movies: PropTypes.array.isRequired,\n}","import styled from \"styled-components\";\n\nexport const NoResults = styled.img`\nwidth: 300px;\nmargin-top: 10px;\nmargin-left: auto;\nmargin-right: auto;\n`; ","import * as SC from './NoResults.styled';\nimport PropTypes from 'prop-types';\n\nexport const NoResults = ({imageUrl}) => {\n    return (\n        <SC.NoResults src={imageUrl} alt='no results'/>\n    )\n}\n\nNoResults.propTypes = {\n    imageUrl: PropTypes.string.isRequired,\n};","import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\n    display: flex;\n    margin-left: auto;\n    margin-right: auto;\n    align-items: center;\n    width: 100%;\n    height: 32px;\n    max-width: 600px;\n    background-color: #fff;\n    border: solid 1px #c71585;\n    border-radius: 4px;\n    overflow: hidden;\n    @media screen and (min-width: 768px){\n        min-width: 600px;\n    }\n`;\n\nexport const SearchFormBtn = styled.button`\n    display: inline-block;\n    height: 100%;\n    padding: 4px;\n    opacity: 0.8;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    border: none;\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    color: black;\n    background-color: #dec1e3;\n    :hover, :focus {\n        color: white;\n        background-color:#c71585;\n        border: solid 1px #c71585;\n        opacity: 1;\n    }\n`;\n\nexport const SearchFormInput = styled.input`\nbox-sizing: border-box;\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    font: inherit;\n    font-size: 16px;\n    vertical-align: middle;\n    border: none;\n    outline: none;\n    padding: 4px;\n    \n    ::placeholder {\n        font: inherit;\n        font-size: 18px;\n}\n`;","import {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport React from \"react\";\nimport * as SC from './SearchForm.style';\n\nexport default function SearchForm({ onSubmit }) {  \n    const [query, setQuery] = useState('');\n\n    const handleChangeQuery = event => {\n        setQuery(event.currentTarget.value.toLowerCase());\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        \n        if (query.trim() === '' ) {\n            alert('Enter the name of the movie');\n        return;\n        }\n        onSubmit(query);\n        setQuery('');\n    };\n\n    return (\n        <SC.SearchForm onSubmit={handleSubmit}>\n            <SC.SearchFormInput\n                type=\"text\"\n                value={query}\n                autoFocus\n                placeholder=\"Enter the name of the movie\"\n                onChange={handleChangeQuery}\n            />\n            <SC.SearchFormBtn type=\"submit\">\n                Search\n            </SC.SearchFormBtn>\n    </SC.SearchForm>\n    )\n};\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};","import styled from \"styled-components\";\n\nexport const Section = styled.main`\npadding-top: 16px;\n`;","import SearchForm from '../../components/SearchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport { NoResults } from 'components/NoResults/NoResults';\nimport noResults from 'components/images/clipart2883707.png';\nimport * as SC from './Movies.styled';\nimport * as API from 'services/api';\n\nconst Movies = () => {\n    const [isLoadingMovies, setIsLoadingMovies] = useState(false);\n    const [movies, setMovies] = useState(null);\n    const [error, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? \"\";\n    const location = useLocation();\n    \n    const handleFormSubmit = name => { \n        setSearchParams(name !== \"\" ? { query: name } : {});        \n    };\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        } const fetchMovieByQuery = async () => {\n            try {\n                setIsLoadingMovies(true);\n                const movies = await API.getMoviesByName(query);\n                setMovies(movies);\n            } catch {\n                setError(`No movies found with name ${query}`);\n            } finally {\n                setIsLoadingMovies(false);\n            }\n        };\n        fetchMovieByQuery();\n    }, [query]);\n\n    return (\n        <SC.Section>\n            <SearchForm onSubmit={handleFormSubmit} />\n            {error && (\n                <>\n                    <NoResults imageUrl={noResults} location={location} />\n                    <p>{error}</p>\n                </>\n            )}\n            {isLoadingMovies && <p>Loading...</p>}\n            {movies && !isLoadingMovies && ((movies.length > 0) ? (\n                <MovieList movies={movies} location={location}/>            \n            ) : (\n                <>\n                    <NoResults imageUrl={noResults} location={location} />\n                    <p>{`No movies found with name ${query}`}</p>\n                </>    \n            ))\n            }\n        </SC.Section>\n    )\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nexport const getTradingMovies = async() => {\n    const response = await axios.get(`/trending/all/day?`);\n    return response.data.results;\n};\n\nexport const getMoviesByName = async query => {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}?`);\n    return response.data;\n};\n\nexport const getCast = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits?`);\n    return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/reviews?`);\n    return response.data.results;\n};\n\n\n\n\n"],"names":["Box","styled","MovieItem","StyledLink","NavLink","Poster","MiddleTitle","MovieList","movies","useState","baseUrl","location","useLocation","map","id","title","name","poster_path","to","state","from","src","noResults","alt","NoResults","imageUrl","SearchForm","SearchFormBtn","SearchFormInput","onSubmit","query","setQuery","event","preventDefault","trim","alert","type","value","autoFocus","placeholder","onChange","currentTarget","toLowerCase","Section","isLoadingMovies","setIsLoadingMovies","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchMovieByQuery","API","length","axios","api_key","include_adult","getTradingMovies","response","data","results","getMoviesByName","getMovieById","movieId","getCast","cast","getReviews"],"sourceRoot":""}