{"version":3,"file":"static/js/779.b96dfc35.chunk.js","mappings":"mPAEaA,E,QAAcC,GAAAA,GAAH,sI,4BCgDxB,EA7CgB,WACZ,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgDF,EAAAA,EAAAA,WAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,oGAEbJ,GAAoB,GAFP,SAGSK,EAAAA,GAAeX,GAHxB,OAGPG,EAHO,OAIbC,EAAWD,EAAQS,KAAI,kBAA4B,CAC3CC,GADe,EAAEA,GAEjBC,OAFe,EAAMA,OAGrBC,QAHe,EAAcA,QAAd,KAJV,gDAUbP,EAAS,uBAVI,yBAYbF,GAAoB,GAZP,4EAAH,qDAelBI,GACH,GAAE,CAACV,KAGA,2BACKO,IAAS,uBAAIA,IACbF,IAAoB,uCACnBA,GAAoBF,EAAQa,OAAS,GACnC,SAAC,EAAD,UACCb,EAAQS,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAAd,OACT,2BACI,wBAAKD,KACL,uBAAIC,MAFCF,EADA,OAQb,sEAIf,C,4MC9CDI,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAGZ,IAAMC,EAAgB,mCAAG,oGACLH,IAAAA,IAAA,sBADK,cACtBI,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAKhBC,EAAe,mCAAG,WAAMC,GAAN,uFACAR,IAAAA,IAAA,8BAAiCQ,IADjC,cACjBJ,EADiB,yBAEhBA,EAASC,KAAKC,SAFE,2CAAH,sDAKfG,EAAY,mCAAG,WAAM1B,GAAN,uFACDiB,IAAAA,IAAA,iBAAoBjB,EAApB,MADC,cAClBqB,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZK,EAAO,mCAAG,WAAM3B,GAAN,uFACIiB,IAAAA,IAAA,iBAAoBjB,EAApB,cADJ,cACbqB,EADa,yBAEZA,EAASC,KAAKM,MAFF,2CAAH,sDAKPC,EAAU,mCAAG,WAAM7B,GAAN,uFACCiB,IAAAA,IAAA,iBAAoBjB,EAApB,cADD,cAChBqB,EADgB,yBAEfA,EAASC,KAAKC,SAFC,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsList = styled.ul`\n    list-style: none;\n    padding-left: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n`;","import * as API from '../../services/api';\nimport * as SC from './Reviews.styled';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [isLoadingReviews, setIsLoadingReviews] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchReviews = async () => {\n            try {\n                setIsLoadingReviews(true);\n                const reviews = await API.getReviews(movieId);\n                setReviews(reviews.map(({id, author, content}) => ({\n                        id,\n                        author, \n                        content,\n                    })))\n            } catch {\n                setError(`Reviews don't exist`);\n            } finally {\n                setIsLoadingReviews(false);\n            }\n        }\n        fetchReviews();\n    }, [movieId]);\n\n    return (\n        <div>\n            {error && <p>{error}</p>}\n            {isLoadingReviews && <p>Loading...</p>}\n            {!isLoadingReviews && reviews.length > 0 ? (\n                <SC.ReviewsList>\n                {reviews.map(({id, author, content}) => (\n                    <li key={id}>\n                        <h3>{author}</h3>\n                        <p>{content}</p>\n                    </li>\n                ))}\n                </SC.ReviewsList>\n            ) : (\n                <p>We don`t have any reviews for this movie</p>\n            )}\n        </div>\n    )\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nexport const getTradingMovies = async() => {\n    const response = await axios.get(`/trending/all/day?`);\n    return response.data.results;\n};\n\nexport const getMoviesByName = async query => {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}?`);\n    return response.data;\n};\n\nexport const getCast = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits?`);\n    return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/reviews?`);\n    return response.data.results;\n};\n\n\n\n\n"],"names":["ReviewsList","styled","movieId","useParams","useState","reviews","setReviews","isLoadingReviews","setIsLoadingReviews","error","setError","useEffect","fetchReviews","API","map","id","author","content","length","axios","api_key","include_adult","getTradingMovies","response","data","results","getMoviesByName","query","getMovieById","getCast","cast","getReviews"],"sourceRoot":""}