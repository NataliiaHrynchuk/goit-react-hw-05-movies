{"version":3,"file":"static/js/195.8807142e.chunk.js","mappings":"kMAgCA,UA5BgB,WACZ,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GACgBN,GACXO,KAAKH,EACb,GAAE,CAACJ,KAGA,yBACKG,EAAQK,OAAS,GACd,wBACCL,EAAQM,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAAd,OACT,2BACI,wBAAKD,KACL,uBAAIC,MAFCF,EADA,OAQb,qEAIf,C,4MC7BKG,EAAU,mCACVC,EAAW,+BAEjBC,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACpBC,QAAS,mCACTC,eAAe,GAEnB,IAAMC,EAAU,kCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEwBJ,IAAAA,IAAA,UAAaD,EAAb,qCAAkDD,IAF1E,cAEOO,EAFP,yBAGQA,EAASC,MAHjB,gCAKH,IAAIC,MAAM,qBALP,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gFACGC,EAAe,IAAIC,gBAAgB,CACrCV,QAASH,EACTc,SAAU,QACVC,KAAM,EACNX,eAAe,EACfO,MAAAA,IAND,kBASwBT,IAAAA,IAAA,UAAaD,EAAb,yBAAsCW,IAT9D,cASOL,EATP,yBAUQA,EAASC,MAVjB,gCAYC,IAAIC,MAAJ,sCAAyCE,IAZ1C,gFAgBA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4B7B,GAA5B,0FACIe,IAAAA,IAAA,iBACQf,EADR,MAENO,MACG,oBACIc,KACIX,EAFR,EAEQA,GACaoB,EAHrB,EAGQC,YACAC,EAJR,EAIQA,MACAC,EALR,EAKQA,KACcC,EANtB,EAMQC,aACcC,EAPtB,EAOQC,aACAC,EARR,EAQQA,SACAC,EATR,EASQA,OATR,MAWO,CACH7B,GAAAA,EACAoB,OAAQZ,EAAUY,EAClBE,MAAAA,EACAC,KAAAA,EACAC,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAnBJ,IAsBHK,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,KA5BE,kEA+BA,IAAMC,EAAU,SAAAjD,GACnB,OAAOe,IAAAA,IAAA,iBACYf,EADZ,cAEFO,MAAK,qBAAEc,KAAO6B,KACVzC,KAAI,gBAAGC,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,KAAMkB,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAkD,CACvD3C,GAAAA,EACAuB,KAAAA,EACAkB,UAAAA,EACAC,MAAOA,EAAQlC,EAAUkC,EAlElB,8BA8DF,GADH,IAQLR,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACR,EAEYM,EAAa,SAAAtD,GACtB,OAAOe,IAAAA,IAAA,iBACQf,EADR,cAENO,MAAM,qBAAEc,KAAOkC,QACR9C,KAAI,kBAA4B,CACpCC,GADQ,EAAEA,GAEVC,OAFQ,EAAMA,OAGdC,QAHQ,EAAcA,QAAd,GADL,IAONgC,OAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAMG,QACrB,GACJ,C","sources":["components/MoreDetails/Reviews.jsx","services/api.js"],"sourcesContent":["import * as API from '../../services/api';\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        API\n            .getReviews(movieId)\n            .then(setReviews); \n    }, [movieId]);\n\n    return (\n        <div>\n            {reviews.length > 0 ? (\n                <ul>\n                {reviews.map(({id, author, content}) => (\n                    <li key={id}>\n                        <h3>{author}</h3>\n                        <p>{content}</p>\n                    </li>\n                ))}\n                </ul>\n            ) : (\n                <p>We don`t have any reviews for this movie</p>\n            )}\n        </div>\n    )\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst API_KEY = '6860d409037e6854532ae07af7af1d83';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '2123fea73978ac77fe6a3f347cf7ced6',\n    include_adult: false,\n};\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\nconst defaultImg = 'http://placehold.it/100x200'\n\nexport async function getTradingMovies() {\n    try {\n        const response = await axios.get(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`);\n        return response.data;\n    } catch(error) {\n    new Error('There is no movie');\n}\n};\n\nexport async function getMoviesByName(query) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n        query,\n    });\n    try {\n        const response = await axios.get(`${BASE_URL}/search/movie?${searchParams}`);\n        return response.data;\n    } catch (error) {\n        new Error(`There is no movie with name ${query}`);\n    }\n};\n\nexport async function getMovieById(movieId) {\n    return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n        ({\n            data:{\n                id, \n                poster_path: poster,\n                title,\n                name,\n                release_date: releaseYear,\n                vote_average: userScore,\n                overview,\n                genres,\n            },\n        }) => ({\n            id,\n            poster: IMG_URL + poster,\n            title,\n            name,\n            releaseYear: new Date(releaseYear).getFullYear(),\n            userScore: Math.round(userScore * 10),\n            overview,\n            genres,\n        })\n    )\n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getCast = movieId => {\n    return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) =>\n        cast.map(({ id, name, character, profile_path: photo}) => ({\n            id,\n            name, \n            character,\n            photo: photo ? IMG_URL + photo : defaultImg,\n        }))\n        )\n        .catch (error => {\n            console.log(error.message);\n        })\n};\n\nexport const getReviews = movieId => {\n    return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then (({data: {results}}) => \n    results.map(({id, author, content}) => ({\n        id,\n        author, \n        content,\n    }))\n    )   \n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\n\n\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","API","then","length","map","id","author","content","API_KEY","BASE_URL","axios","api_key","include_adult","IMG_URL","getTradingMovies","response","data","Error","getMoviesByName","query","searchParams","URLSearchParams","language","page","getMovieById","poster","poster_path","title","name","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","catch","error","console","log","message","getCast","cast","character","photo","profile_path","getReviews","results"],"sourceRoot":""}