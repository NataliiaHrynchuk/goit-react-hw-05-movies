{"version":3,"file":"static/js/425.b0a1dc4e.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.style.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Box = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    margin-left: auto;\n    margin-right: auto;\n    width: 100%;\n    gap: 12px;\n    padding: 0;\n    border-bottom: solid 1px grey;\n    box-shadow: 0px 3px 3px -3px rgba(0,0,0,0.55);\n`;\n\nexport const MovieItem = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    width: 100%;\n    max-width: 200px;\n    height: 320 px;\n    background: rgb(255, 255, 255);\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n    border-radius: 5px;\n    text-decoration: none;\n    color: black;\n    transition-duration: 300ms;\n    &:hover {\n        cursor: pointer;\n        transform: scale(1.03);\n        box-shadow: rgb(0 0 0 / 8%) 0px 10px 25px;\n    }\n`\n\nexport const StyledLink = styled(NavLink)`\n    border-radius: 4px;\n    text-decoration: none;\n    color: black;\n    font-weight: 500;\n`;\n\nexport const Poster = styled.img`\n    padding: 0px;\n    margin: 0px; \n    /* height: 260px; */\n    width: 100%;\n    display: block;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n`;","import { useLocation } from 'react-router-dom';\nimport * as SC from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n    const location = useLocation();\n    return (\n        <SC.Box>\n            {movies.map(({ id, title, name, poster}) =>\n                <SC.MovieItem key = {id}>\n            <SC.StyledLink to={`/movies/${id}`} state={{from:location}}>\n                <SC.Poster src={poster} alt={title || name}/>\n                <h3>{title || name}</h3>\n            </SC.StyledLink>\n        </SC.MovieItem>)\n}\n                \n        </SC.Box>\n    )\n}","import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\n    display: flex;\n    margin-left: auto;\n    margin-right: auto;\n    align-items: center;\n    width: 400px;\n    height: 32px;\n    max-width: 600px;\n    background-color: #fff;\n    border: solid 1px #c71585;\n    border-radius: 4px;\n    overflow: hidden;\n`;\n\nexport const SearchFormBtn = styled.button`\n    display: inline-block;\n    height: 100%;\n    padding: 4px;\n    opacity: 0.8;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    border: none;\n    color: black;\n    background-color: #c6bacb;\n    :hover, :focus {\n        color: white;\n        background-color:#c71585;\n        border: solid 1px #c71585;\n        opacity: 1;\n    }\n`;\n\nexport const SearchFormInput = styled.input`\nbox-sizing: border-box;\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    font: inherit;\n    font-size: 16px;\n    vertical-align: middle;\n    /* border: solid 1px #c71585; */\n    border: none;\n    outline: none;\n    padding: 4px;\n    /* padding-left: 4px;\n    padding-right: 4px; */\n    /* :focus {\n        border: solid 1px #139cd1;\n    } */\n    ::placeholder {\n        font: inherit;\n        font-size: 18px;\n}\n`;","import React from \"react\";\nimport * as SC from './SearchForm.style';\n\nexport default function SearchForm({ onSubmit }) {            \n    const handleSubmit = event => {\n        event.preventDefault();\n        \n        if (!event.currentTarget.elements.query.value) {\n            alert('Enter movies name');\n        return;\n        }\n        onSubmit(event.currentTarget.elements.query.value);\n        event.currentTarget.reset();\n    };\n\n    return (\n        <SC.SearchForm onSubmit={handleSubmit}>\n            <SC.SearchFormInput\n                type=\"text\"\n                name=\"query\"\n                autoFocus\n                utocomplete=\"off\"\n            />\n            <SC.SearchFormBtn type=\"submit\">\n                Search\n            </SC.SearchFormBtn>\n    </SC.SearchForm>\n    )\n};\n","import SearchForm from '../components/SearchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport * as API from '../services/api';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? \"\";\n    console.log(query);\n    \n    const handleFormSubmit = name => { \n        setSearchParams(name !== \"\" ? { query: name } : {});        \n    };\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        }\n        API\n            .getMoviesByName(query)\n            .then((results) => setMovies(results.map(\n                    ({ id,\n                        title,\n                        name,\n                        poster_path: poster,\n                    }) => {\n                        return {\n                            id,\n                            title,\n                            name,\n                            poster: IMG_URL + poster,\n                        };}\n                    \n                )));\n    }, [query]);\n\n    return (\n        <main>\n            <SearchForm onSubmit={handleFormSubmit} />\n            {movies &&\n                <MovieList movies={movies}/>       \n            }\n        </main>\n    )\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: '6860d409037e6854532ae07af7af1d83',\n    include_adult: false,\n};\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const getTradingMovies = () => {\n    return axios.get(`/trending/all/day?`)\n    .then(({data: {results}}) => \n    results)\n    . catch (error => {\n       console.log(error.message);\n    });\n};\n\nexport const getMoviesByName = query => {\n    return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({data: {results}}) => \n    results)\n    . catch (error => {\n       console.log(error.message);\n    });\n};\n\nexport const getMovieById = movieId => {\n    return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n        ({\n            data:{\n                id, \n                poster_path: poster,\n                title,\n                name,\n                release_date: releaseYear,\n                vote_average: userScore,\n                overview,\n                genres,\n            },\n        }) => ({\n            id,\n            poster: IMG_URL + poster,\n            title,\n            name,\n            releaseYear: new Date(releaseYear).getFullYear(),\n            userScore: Math.round(userScore * 10),\n            overview,\n            genres,\n        })\n    )\n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\nexport const getCast = movieId => {\n    return axios\n        .get(`/movie/${movieId}/credits?`)\n        .then(({data: {cast}}) =>\n        cast\n        )\n        .catch (error => {\n            console.log(error.message);\n        })\n};\n\nexport const getReviews = movieId => {\n    return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then (({data: {results}}) => \n    results\n    )   \n    .catch (error => {\n        console.log(error.message);\n    });\n};\n\n\n\n\n"],"names":["Box","styled","MovieItem","StyledLink","NavLink","Poster","MovieList","movies","location","useLocation","map","id","title","name","poster","to","state","from","src","alt","SearchForm","SearchFormBtn","SearchFormInput","onSubmit","event","preventDefault","currentTarget","elements","query","value","reset","alert","type","autoFocus","utocomplete","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","console","log","useEffect","API","then","results","poster_path","axios","api_key","include_adult","getTradingMovies","data","catch","error","message","getMoviesByName","getMovieById","movieId","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","getCast","cast","getReviews"],"sourceRoot":""}